v-model使用元素：input/textarea/select

v-model.*  后缀修饰符使用
    v-model.lazy 懒更新，当用户光标onblur时才更新model处内容，用于表单验证提高用户体验
    v-model.trim
    去空格，去除用户在model内多输入的空格
    v-model.number
    将model内转化为number类型

vue控制流指令

    <div v-if="role == 'admin">
        管理员你好
    </div>
    <div v-else-if="role == 'hr'">
        HR你好
    </div>
    <div v-else>
        您没有权限访问
    </div>

计算属性

Vue({
	computed:{
	    sum:function({
	        return this.math+this.english
	    })
	}
})

   computed 有缓存，计算方面优于methods(每次都要调用)


vue组件

   eg:
    Vue.component('ddd',{
   	template:'<button @click="on_click">弹弹弹</button>',
  	methods:{
		on_click:function(){
			alert('Yo.');}
	  	}
   });

   限定组件的域可将组件写在指定域内(components复数)

   new Vue({
       el:'#app',
       components:{
          ddd:{
            template:'<button @click="on_click">弹弹弹</button>',
            methods:{
              on_click:function(){
                 alert('Yo.');
              }
            }
          }
       }
   })


组件
    component:

      html中标签为<template id="eg"> </template>

      Vue.component('like',{
          template:'#eg',
          data:function(){
              return{
                 ……                    组件中data必须是函数
              }
            },
          methods:{

          }
      })

  组件自定义传参
    props:[]
            父子通信
    Vue.component('user',{
        template:'<a :href="\' http://baidu.com/ \' + username"> @{{username}} </a> ',
        props:['username'],
        methods:{}
    })

  平行组件监听
     中心事件调度器
       var Event = new Vue();
            ///*********组件1
       Vue.component('li',{
           template:`
              <div>
                  我说：<input @keyup="on_change" v-model="i_said"/>
              </div>
           `,
           methods:{
              on_change:function(){
                  Event.$emit('something',this.i_said);
              }
           },
           data:function(){
              return{
                  i_said:'',
              }
           }
       })
        
           ///**********组件2

     Vue.component('wang',{
         template:`
            <div>李说：{{li_said}} </div>,
         `,
         data:function(){
            return{
               li_said:'',
            }
         },

         mounted:function(){
            var me=this;
            Event.$on('something' function(data){
               me.li_said = data;
            });
         }
     })



过滤器 filter

    html:
       {{length | meter(unit)}}

    js:
       Vue.filter('meter',function(val,unit){
           ……
           return val + unit;
       })


自定义指令 Vue.directive

    html: <div v-pin="pined" class="card"> 
            <button @click="pined=!pined">定住</button>
            Lorem 
          </div>

    js:
          Vue.directive('pin', function(el, binding) {  //*el为v-pin绑定的对象div,binding为v-pin引号内的参数pined
            var pined = binding.value;
            if (pined) {
              el.style.position = 'fixed';
              el.style.top = '10px';
              el.style.left = '10px';
            } else {
              el.style.position = 'static';
            }
          
          
          })

          new Vue({
            el: '.seg',
            data: {
              card:{
                pined:false,
              }
            }
          });
   
   修饰符：
        html: <div v-pin:true.bottom.right="pined" class="card"> 

        js:
          Vue.directive('pin', function(el, binding) {  //*el为v-pin绑定的对象div,binding为v-pin引号内的参数pined
            var pined = binding.value;

            var position = binding.modifiers;   //**获取buttom\right
            var warning = binding.arg;         //**获取参数true

            if (pined) {                       //**判断位置进行修改
              el.style.position = 'fixed';

                 for(var key in position){
                     if (position[key]){
                        el.style[key] = '10px';
                     }
                 }

            } else {
              el.style.position = 'static';
            }

            if(warning === 'true'){           //**判断参数进行背景色改变
              el.style.background = 'yellow';
            }
          
          
          })



混合mixins:
    组件重复部分可用mixins节省代码

        js:
           var base={
             methods: {
               show: function() {
                 this.visible = true;
               },
               hide: function() {
                 this.visible = false;
               },
               toggle:function(){
                     this.visible=!this.visible;
                   }
             },
             data: function() {
               return {
                 visible: false,
               }
             }
           };
           
           
           Vue.component('tooltip',{
               template:`
                  <div>
                      <span @mouseenter="show" @mouseleave="hide">BYS</span>
                      <div v-if="visible">白岩松</div>
                  </div>
               `,
               mixins:[base]
               //***若要区别定义data内数据可在mixins下重新定义覆盖
               data:function(){
                    ******
               }
           });
           
           Vue.component('popup',{
             template:`
                  <div>
                      <button @click="toggle">Popup</button>
                      <div v-if="visible">aaaaaaaaaaaaaaaaaaa</div>
                  </div>
             `,
               mixins:[base]
           })


插槽 slot   

     使组件中template中标签内的内容动态化  (template中只能有一个明确的根 //**div)

     html:
        <panel>
          <div slot="content">ddddddd</div>
          <div slot="title">gggg</div>
          <div slot="footer">wwwww</div>
        </panel>
        
        <template id="tpl">
          <div>
           <div class="title">
                <slot name="title">aa</slot>    <!-- //***指定slot -->
           </div>
           <div class="content">
               <slot name="content">bb</slot>    <!-- //***指定slot -->
           </div>
           <div class="footer">
               <slot name="footer">cc</slot>    <!-- //***指定slot -->
           </div>
          </div>
        </template>
     js:
        Vue.component('panel',{
          template:'#tpl',
        })

        new Vue({
            el:'#app',
        })