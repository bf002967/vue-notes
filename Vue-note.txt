v-model使用元素：input/textarea/select

v-model.*  后缀修饰符使用
    v-model.lazy 懒更新，当用户光标onblur时才更新model处内容，用于表单验证提高用户体验
    v-model.trim
    去空格，去除用户在model内多输入的空格
    v-model.number
    将model内转化为number类型

vue控制流指令

    <div v-if="role == 'admin">
        管理员你好
    </div>
    <div v-else-if="role == 'hr'">
        HR你好
    </div>
    <div v-else>
        您没有权限访问
    </div>

计算属性

Vue({
	computed:{
	    sum:function({
	        return this.math+this.english
	    })
	}
})

   computed 有缓存，计算方面优于methods(每次都要调用)


vue组件

   eg:
    Vue.component('ddd',{
   	template:'<button @click="on_click">弹弹弹</button>',
  	methods:{
		on_click:function(){
			alert('Yo.');}
	  	}
   });

   限定组件的域可将组件写在指定域内(components复数)

   new Vue({
       el:'#app',
       components:{
          ddd:{
            template:'<button @click="on_click">弹弹弹</button>',
            methods:{
              on_click:function(){
                 alert('Yo.');
              }
            }
          }
       }
   })


组件
    component:

      html中标签为<template id="eg"> </template>

      Vue.component('like',{
          template:'#eg',
          data:function(){
              return{
                 ……                    组件中data必须是函数
              }
            },
          methods:{

          }
      })

  组件自定义传参
    props:[]
            父子通信
    Vue.component('user',{
        template:'<a :href="\' http://baidu.com/ \' + username"> @{{username}} </a> ',
        props:['username'],
        methods:{}
    })

  平行组件监听
     中心事件调度器
       var Event = new Vue();
            ///*********组件1
       Vue.component('li',{
           template:`
              <div>
                  我说：<input @keyup="on_change" v-model="i_said"/>
              </div>
           `,
           methods:{
              on_change:function(){
                  Event.$emit('something',this.i_said);
              }
           },
           data:function(){
              return{
                  i_said:'',
              }
           }
       })
        
           ///**********组件2

     Vue.component('wang',{
         template:`
            <div>李说：{{li_said}} </div>,
         `,
         data:function(){
            return{
               li_said:'',
            }
         },

         mounted:function(){
            var me=this;
            Event.$on('something' function(data){
               me.li_said = data;
            });
         }
     })